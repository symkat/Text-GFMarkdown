#!/usr/bin/perl
use warnings;
use strict;
use Text::GFMarkdown;
use Text::GFMarkdown::Lex;
use Text::GFMarkdown::Parse;
use Text::GFMarkdown::Compile;
use Data::Dumper;


my ( $content, $file, $debug ) = ( undef, 'test.md', 1 );

while ( defined ( my $arg = shift @ARGV ) ) {
    if ( $arg =~ /^-?-f(?:ile)$/ ) {
        $file = shift @ARGV;
    } elsif ( $arg =~ /^-?-d(?:ebug)$/ ) {
        ${^_DEBUG} = 1; # Turn debugging on in all modules.
        $debug = 1;
    } else {
        $content = $arg;
    }
}

if ( defined $file ) {
    open my $lf, "<", $file
        or die "Failed to open $file for reading: $!";
    $content = do { local $/; <$lf> };
    close $lf;
}


sub debug {
    print "\033[33mTokens From Lexer\033[0m\n";

    my $lex = Text::GFMarkdown::Lex->new;

    $lex->register_hook(sub {
        my ( $i, $ref ) = @_;

        return unless $i == 0; # Only run once, on the first token.
        my @new_start;

        if ( $ref->[$i]->{type} eq 'hr' ) {
            my $meta_start = shift @$ref;

            while ( my $key = shift @$ref ) {
                last if $key->{type} eq 'hr';
                my $metadata_value;
                my $metadata_key = $key->{content};
                $metadata_key =~ s/:$//;

                while ( my $value = shift @$ref ) {
                    if ( $value->{type} eq 'space' ) {
                        $metadata_value .= ' ';
                    } elsif ( $value->{type} eq 'word' ) {
                        $metadata_value .= $value->{content};
                    } elsif ( $value->{type} eq 'line_break' ) {
                        last;
                    } else {
                        die "Unexpected token in hook";
                    }
                }
                push @new_start,
                    { type => 'metadata_key',   value => $metadata_key },
                    { type => 'metadata_value', value => $metadata_value };
            }
            unshift @{$ref}, @new_start;
        }
    });

    my @lex = $lex->run_hooks($lex->lex($content));
    print Dumper \@lex;

    print "\033[33mParse Tree\033[0m\n";

    my @tree = Text::GFMarkdown::Parse->new->parse(@lex);
    print Dumper \@tree;

    print "\033[33mFinal String\033[0m\n";

    my $str = Text::GFMarkdown::Compile->new->compile(@tree);
    print Dumper $str;
}

sub show_markdown {
    my $md = Text::GFMarkdown->new;
    print $md->markdown($content);
}

show_markdown   unless $debug;
debug           if $debug;
